<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于我</title>
    <url>/19487/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
<a id="more"></a>

<p><strong>生于1996❤️</strong></p>
<p><strong>有喜欢的人</strong></p>
<p><strong>热爱吉他 滑板</strong></p>
<video id="video" controls="" preload="none" poster="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/689edc3dadc7181450becaa2fb9f3483a789c759b11dd1cb540931de705cbdcaafa15c54ae8705663049a18e0466e581?pictype=scale&from=30113&version=3.3.3.3&uin=99172376&fname=avatar.png&size=750">
      <source id="mp4" src="https://mvvideo11.meitudata.com/5dd810a98c6654930.mp4?k=0a79bd43e974d3b8cc8836b889947681&t=5f1f639e" type="video/mp4">
</video>
]]></content>
      <tags>
        <tag>关于我</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习</title>
    <url>/593681104/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
<a id="more"></a>



<h1 id="并发编程学习（1）"><a href="#并发编程学习（1）" class="headerlink" title="并发编程学习（1）"></a>并发编程学习（1）</h1><h2 id="内存模型的相关概念"><a href="#内存模型的相关概念" class="headerlink" title="内存模型的相关概念"></a>内存模型的相关概念</h2><h3 id="1-cpu内存模型"><a href="#1-cpu内存模型" class="headerlink" title="1. cpu内存模型"></a>1. cpu内存模型</h3><blockquote>
<p>大家都知道，计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。<br>由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。<br>执行流程：程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中</p>
</blockquote>
<p><img data-src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/9db921d7da6cd31b5184f4bacae7c4508da21674eaee598812a502ac4c500d0ef305e1454a24013f47c6343b6986e81e?pictype=scale&from=30113&version=3.3.3.3&uin=99172376&fname=%E5%A4%9A%E6%A0%B8%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84.png&size=750" alt="多核并发缓存架构图"></p>
<h3 id="2-JMM内存模型"><a href="#2-JMM内存模型" class="headerlink" title="2. JMM内存模型"></a>2. JMM内存模型</h3><blockquote>
<p>Java线程內存模型和cpu缓存模型类似,是基于cpu缓存模型来建立的,Jva线程内存模型是标准化的,屏蔽掉了底层不同计算机的区别</p>
</blockquote>
<p><img data-src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/de6822338ed502afb926f1b7b52413772fe8b72574c6a96793ceb86356d9f6dd9d719da1c83b9b09cbb2684fe7d8d163?pictype=scale&from=30113&version=3.3.3.3&uin=99172376&fname=JMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png&size=750" alt="JMM内存模型图"></p>
<h2 id="并发编程中的三个概念"><a href="#并发编程中的三个概念" class="headerlink" title="并发编程中的三个概念"></a>并发编程中的三个概念</h2><blockquote>
<p>要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p>
</blockquote>
<p>1.原子性：即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。<br>2.可见性：是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。<br>3.有序性：即程序执行的顺序按照代码的先后顺序执行。</p>
<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p><img data-src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/3d6e51c782958e52bf9418f9e8ef87565d877939c519afef2c1fe0751b2e60cb5f23323991afb8d0558a86aad5f0c96a?pictype=scale&from=30113&version=3.3.3.3&uin=99172376&fname=JMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E8%AF%A6%E6%83%85.png&size=750" alt="JMM内存模型详情图"></p>
<h2 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h2><blockquote>
<p>定义:当多个线程访问某个类时,不管运行时环境采用何种调度方式或者这些进程将如何交替执行,并且在主调代码中不需要任何额外的同<br>步或协同,这个类都能表现出正确的行为,那么就称这个类是线程安全的</p>
</blockquote>
<h3 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1. 原子性"></a>1. 原子性</h3><p>提供了互斥访问，同一时刻只能有一个线程来对它进行操作。在Java中，<code>对基本数据类型的变量的读取和赋值操作是原子性操作</code>，即这些操作是不可被中断的，要么执行，要么不执行。</p>
<blockquote>
<p>JMM数据原子操作</p>
<ul>
<li>read(读取):从主内存读取数据  </li>
<li>load(载入):将主内存读取到的数据写入工作内存 </li>
<li>use(使用):从工作内存读取数据来计算 </li>
<li>assign(赋值):将计算好的值重新赋值到工作内存中 </li>
<li>store(存储):将工作内存数据写入主内存 </li>
<li>write(写入):将store过去的变量值赋值给主内存中的变量 </li>
<li>lock(锁定):将主内存变量加锁,标识为线程独占状态 </li>
<li>unlock(解锁):将主内存变量解锁,解锁后其他线程可以锁定该变量</li>
</ul>
</blockquote>
<h3 id="2-可见性"><a href="#2-可见性" class="headerlink" title="2. 可见性"></a>2. 可见性</h3><p>一个线程对主内存的修改可以及时的被其他线程观察到。对于可见性，Java提供了<code>volatile关键字</code>来保证可见性。</p>
<h3 id="3-有序性"><a href="#3-有序性" class="headerlink" title="3. 有序性"></a>3. 有序性</h3><p>一个线程观察其他线程中的指令执行顺序，由于指令重排序的存在，该观察结果一般杂乱无序。在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>
<h3 id="4-原子性"><a href="#4-原子性" class="headerlink" title="4. 原子性"></a>4. 原子性</h3><h4 id="Atomic包"><a href="#Atomic包" class="headerlink" title="Atomic包"></a>Atomic包</h4><ol>
<li>AtomicInteger：使用CAS解决了高并发问题<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.fine.demo.concurrent.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.VM;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Integer类型（原子性）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置为使用Unsafe.compareAndSwapInt进行更新</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储字段value在JVM中的偏移地址</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以原子方式将当前值增加1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回当前的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 除了实现sun.misc.Unsafe中列出的方法，还提供了其他更精细的低级别操作，与底层交互紧密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 针对多线程中单变量的可视性，以及多变量的顺序依赖和值依赖，JDK 9 引入四种资源同步的语义，由弱到强分别是：</span></span><br><span class="line"><span class="comment">     * Plain, Opaque, Release[write]/Acquire[read], Volatile。【参见VarHandle】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单例对象</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe theUnsafe = <span class="keyword">new</span> Unsafe();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">objectFieldOffset</span><span class="params">(Field var1)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回单例对象，由系统内部的方法调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Class var0 = Reflection.getCallerClass();</span><br><span class="line">            <span class="keyword">if</span> (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">&quot;Unsafe&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> theUnsafe;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回对象o的offset地址处的值，并将该值原子性地增加delta</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 该对象的原值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> v;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 获取对象o中offset地址处对应的int型字段的值</span></span><br><span class="line">                v = getIntVolatile(o, offset);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 拿期望值v与对象o的offset地址处的当前值比较，如果两个值相等，将当前值更新为v + delta</span></span><br><span class="line">                <span class="comment">// 否则不断刷新当前值和期望值（工作内存和主内存）直至两值相等再进行更新操作</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (!<span class="keyword">this</span>.compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对象o中offset地址处对应的int型字段的值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getIntVolatile</span><span class="params">(Object o, <span class="keyword">long</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿期望值expected与对象o的offset地址处的当前值比较，如果两个值相等，将当前值更新为x</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">long</span> expected, <span class="keyword">long</span> x)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
ps：AtomicLong 、LongAdder(JDK8新增)解决CAS多次循环造成性能较低的问题适用于高并发</li>
<li>AtomicReference AtomicXXXFieldUpdater：原子性更新某一个类的实例</li>
<li>AtomicStampReference：解决CAS的ABA问题</li>
</ol>
<p><strong>ABA问题</strong>：cas操作中，其他线程将变量值由a改为b，又讲b改为a，本线程用期望值a进行比较时，发现a变量没有变，于是cas就将a值进行了交换操作，实际上该值已经被其他线程修改过，与设计思想是不符合的</p>
<p><strong>ABA问题解决思路</strong>：每次变量更新的时候把版本号加1，当变量发生修改时，版本号递增<br>4. AtomicLongArray<br>5. AtomicBoolean<br>compareAndSet(false, true)</p>
<h4 id="原子性-锁"><a href="#原子性-锁" class="headerlink" title="原子性-锁"></a>原子性-锁</h4><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://www.cnblogs.com/guanghe/p/9206635.html">并发之原子性、可见性、有序性</a></p>
]]></content>
      <tags>
        <tag>夹哇成长历程</tag>
      </tags>
  </entry>
  <entry>
    <title>项目部署</title>
    <url>/1084990281/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
<a id="more"></a>


<h1 id="部署手册"><a href="#部署手册" class="headerlink" title="部署手册"></a>部署手册</h1><blockquote>
<p>本次部署采用docker部署基础环境容器，前端项目部署在nginx上，后端项目使用java-jar启动</p>
</blockquote>
<h2 id="目录解释"><a href="#目录解释" class="headerlink" title="目录解释"></a>目录解释</h2><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><ul>
<li>bin：执行脚本</li>
<li>doc：nginx基础配置，docker安装及jdk安装说明</li>
<li>lib：启动jar包，jdk安装包</li>
<li>logs：日志文件</li>
<li>temp：临时文件</li>
<li>backup：版本备份</li>
<li>start.sh：app启动脚本</li>
<li>restart.sh：app重启脚本<h3 id="一级目录"><a href="#一级目录" class="headerlink" title="一级目录"></a>一级目录</h3><h4 id="核心目录bin："><a href="#核心目录bin：" class="headerlink" title="核心目录bin："></a>核心目录bin：</h4></li>
<li>xxx.sh：核心脚本，封装了一些linux指令</li>
<li>docker-compose.yml：容器，容器的初始化参数（密码，端口）等启动项配置</li>
<li>data：docker容器的文件挂载目录，其中包含部署前端项包的nginx/html文件夹<h4 id="核心目录lib："><a href="#核心目录lib：" class="headerlink" title="核心目录lib："></a>核心目录lib：</h4></li>
<li>lib：存放后端项目jar包</li>
</ul>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="1-安装jdk与docker环境"><a href="#1-安装jdk与docker环境" class="headerlink" title="1. 安装jdk与docker环境"></a>1. 安装jdk与docker环境</h3><blockquote>
<p>安装jdk</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 安装jdk</span><br><span class="line">cd /usr/local/app/lib</span><br><span class="line">tar –xvf  jdk-8u271-linux-x64.tar.gz  -C /usr/local/bin/jdk1.8.0_271 </span><br><span class="line"># 配置环境变量</span><br><span class="line">vi /etc/profile</span><br><span class="line"># 在末尾行添加</span><br><span class="line">    #set java environment</span><br><span class="line">    JAVA_HOME=/usr/local/bin/jdk1.8.0_271</span><br><span class="line">    CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line">    PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">    export JAVA_HOME CLASSPATH PATH</span><br><span class="line"># 保存退出</span><br><span class="line">source /etc/profile  # 使更改的配置立即生效</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装docker+docker-compose</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 安装yum</span><br><span class="line">apt-get update</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">apt-get install yum</span><br><span class="line">sudo apt install yum-utils</span><br><span class="line"># 1、yum 包更新到最新 </span><br><span class="line">sudo yum update </span><br><span class="line"># 2、作用：安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依 赖的sudo yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br><span class="line"># 3、 设置yum源 </span><br><span class="line"># 3.1、方案一：使用ustc的（推荐） </span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line"># 3.2、方案二：使用阿里云（可能失败） </span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line"># 4、 安装docker</span><br><span class="line">sudo yum install -y docker-ce</span><br><span class="line"></span><br><span class="line"># 启动docker服务： </span><br><span class="line">systemctl start docker </span><br><span class="line"># 停止docker服务： </span><br><span class="line">systemctl stop docker </span><br><span class="line"># 重启docker服务： </span><br><span class="line">systemctl restart docker </span><br><span class="line"># 查看docker服务状态： </span><br><span class="line">systemctl status docker </span><br><span class="line"># 设置开机启动docker服务： </span><br><span class="line">systemctl enable docker</span><br><span class="line"># 安装docker-compose</span><br><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose </span><br><span class="line"># 设置文件可执行权限 </span><br><span class="line">chmod +x /usr/local/bin/docker-compose </span><br><span class="line"># 查看版本信息 </span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure>
<h3 id="2-启动项目"><a href="#2-启动项目" class="headerlink" title="2. 启动项目"></a>2. 启动项目</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/usr/local/app/start.sh</span><br></pre></td></tr></table></figure>
<h3 id="3-重启项目"><a href="#3-重启项目" class="headerlink" title="3. 重启项目"></a>3. 重启项目</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/usr/local/app/restart.sh</span><br></pre></td></tr></table></figure>

<h2 id="更新部署"><a href="#更新部署" class="headerlink" title="更新部署"></a>更新部署</h2><blockquote>
<p>准备工作：前端项目压缩成front.tar包（后端项目jar包即可）上传至<code>/usr/local/app/temp</code></p>
</blockquote>
<h3 id="前端更新"><a href="#前端更新" class="headerlink" title="前端更新"></a>前端更新</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 上传前端包</span><br><span class="line">cd /usr/local/app/temp &amp;&amp; sudo rz</span><br><span class="line"># 部署服务包</span><br><span class="line">/usr/local/app/bin/deploy_front.sh</span><br></pre></td></tr></table></figure>
<h3 id="后端更新"><a href="#后端更新" class="headerlink" title="后端更新"></a>后端更新</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 上传后端包</span><br><span class="line">cd /usr/local/app/temp &amp;&amp; sudo rz</span><br><span class="line"># 部署服务包</span><br><span class="line">/usr/local/app/bin/deploy_backend.sh</span><br></pre></td></tr></table></figure>

<h2 id="脚本下载"><a href="#脚本下载" class="headerlink" title="脚本下载"></a>脚本下载</h2><blockquote>
<p>需要把脚本指令中的项目名称替换成自己的项目<br><a href="http://minio-xiu.utools.club/share/app.zip">脚本传送门</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>夹哇成长历程</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML转换PDF</title>
    <url>/198480456/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
<a id="more"></a>


<h1 id="HTML转换PDF"><a href="#HTML转换PDF" class="headerlink" title="HTML转换PDF"></a>HTML转换PDF</h1><h2 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf.tool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlworker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext-asian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xhtmlrenderer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flying-saucer-pdf-itext5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="转换环境准备"><a href="#转换环境准备" class="headerlink" title="转换环境准备"></a>转换环境准备</h2><ol>
<li><strong>输入的HTML页面必须是标准的HTML</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>语法必须是标准的HTML语法：所有标签都必须闭合</strong></li>
<li><strong>CSS中必须指定字体，然后在java代码中设置相应的字体</strong><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fine.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Throwables;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.DocumentException;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.pdf.BaseFont;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</span><br><span class="line"><span class="keyword">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2020 杭州***有限公司</span></span><br><span class="line"><span class="comment"> * Date: 2020/9/29</span></span><br><span class="line"><span class="comment"> * Time: 下午1:35</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 2020年 &lt;a href=&quot;mailto:finedemo@163.com&quot;&gt;秀&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTypeConvertUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String pdfPath;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String fontPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将HTML转成PDF格式的文件</span></span><br><span class="line"><span class="comment">     * html文件的格式比较严格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> htmlFilePath html文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfFilePath pdf文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">html2pdf</span><span class="params">(String htmlFilePath, String pdfFilePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;FileTypeConvertUtil[]html2pdf[]start! htmlFilePath:&#123;&#125;, pdfFilePath:&#123;&#125;&quot;</span>, htmlFilePath, pdfFilePath);</span><br><span class="line">            <span class="comment">// step 1</span></span><br><span class="line">            String url = <span class="keyword">new</span> File(htmlFilePath).toURI().toURL().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// step 2</span></span><br><span class="line">            OutputStream os = <span class="keyword">new</span> FileOutputStream(pdfFilePath);</span><br><span class="line">            ITextRenderer renderer = <span class="keyword">new</span> ITextRenderer();</span><br><span class="line">            renderer.setDocument(url);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// step 3 解决中文支持</span></span><br><span class="line">            String fontPath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            ITextFontResolver fontResolver = renderer.getFontResolver();</span><br><span class="line">            fontResolver.addFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);</span><br><span class="line"></span><br><span class="line">            renderer.layout();</span><br><span class="line">            renderer.createPDF(os);</span><br><span class="line">            os.close();</span><br><span class="line">            log.info(<span class="string">&quot;FileTypeConvertUtil[]html2pdf[]success!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;FileTypeConvertUtil[]html2pdf[]error! cause:&#123;&#125;&quot;</span>, Throwables.getStackTraceAsString(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【maven项目打jar包,无法获取font路径】</span></span><br><span class="line"><span class="comment">     *  解决方案：将文件提取到jar包通路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 构造jar包外部的pdf文件夹+字体文件</span></span><br><span class="line">            log.info(<span class="string">&quot;FileTypeConvertUtil[]init[]make[]contractFile[]start!&quot;</span>);</span><br><span class="line">            pathInit();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建pdf文件夹</span></span><br><span class="line">            log.info(<span class="string">&quot;FileTypeConvertUtil[]init[]createPdfFile[]pdfPath:&#123;&#125;&quot;</span>, pdfPath);</span><br><span class="line">            createPdfFile();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化字体文件</span></span><br><span class="line">            log.info(<span class="string">&quot;FileTypeConvertUtil[]init[]createFontFile[]fontPath:&#123;&#125;&quot;</span>, fontPath);</span><br><span class="line">            createFontFile();</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;FileTypeConvertUtil[]init[]success!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;FileTypeConvertUtil[]init[]error! cause:&#123;&#125;&quot;</span>, Throwables.getStackTraceAsString(e));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createFontFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream fontIs = <span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">&quot;/pdf/simsun.ttf&quot;</span>);</span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(fontPath));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> byteCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((byteCount = fontIs.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, byteCount);</span><br><span class="line">        &#125;</span><br><span class="line">        fontIs.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createPdfFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File contractFile = <span class="keyword">new</span> File(pdfPath);</span><br><span class="line">        <span class="keyword">if</span> (!contractFile.exists()) &#123;</span><br><span class="line">            contractFile.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pathInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 项目路径</span></span><br><span class="line">        String jarPath = <span class="keyword">this</span>.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class="line">        <span class="comment">// 项目名称</span></span><br><span class="line">        String itemName = <span class="string">&quot;***.jar&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (jarPath.contains(itemName)) &#123;</span><br><span class="line">            <span class="comment">// jarPath路径需自己调试</span></span><br><span class="line">            jarPath = jarPath.substring(<span class="number">6</span>, jarPath.indexOf(itemName));</span><br><span class="line">        &#125;</span><br><span class="line">        pdfPath = jarPath + <span class="string">&quot;pdf&quot;</span>;</span><br><span class="line">        fontPath = pdfPath + <span class="string">&quot;/simsun.ttf&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2></li>
</ol>
<p><strong>中文不显示问题</strong>:<br>body加上任意中文字体，如宋体：SimSun</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;font-family: SimSun&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>夹哇成长历程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 基本使用Api</title>
    <url>/1769128473/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>写作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌百度搜索我是陈独秀</title>
    <url>/22703/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
<a id="more"></a>

<p>谷歌百度搜索我是陈独秀</p>
<p><a href="https://finedemo.cn" class="LinkCard" target="_blank">独秀的博客</a></p>
<p>demo</p>
]]></content>
      <tags>
        <tag>夹哇成长历程</tag>
      </tags>
  </entry>
  <entry>
    <title>Makdown使用说明</title>
    <url>/30919/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
<a id="more"></a>

<h2 id="段落及区块引用"><a href="#段落及区块引用" class="headerlink" title="段落及区块引用"></a>段落及区块引用</h2><blockquote>
<p>这段文字将被高亮显示<br><a href="http://www.baidu.com/">点击跳转百度</a></p>
</blockquote>
<p><img data-src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/46761c07812784afea32873ba78450cc75a35f3ddb763ef809f487f8b409e2f0b7c979807d2570729c21069fa1e8ccdb?pictype=scale&from=30013&version=3.3.3.3&uin=99172376&fname=markdown.png&size=750" alt="markdown"></p>
<center>demo</center>

<p><img data-src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>有序列表</li>
<li>无序列表</li>
</ul>
<ol>
<li>demo</li>
<li>demo</li>
</ol>
<h2 id="使用列表的一些注意事项"><a href="#使用列表的一些注意事项" class="headerlink" title="使用列表的一些注意事项"></a>使用列表的一些注意事项</h2><p>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格</p>
<ul>
<li><p>段落一</p>
<p>小段一</p>
</li>
<li><p>段落二</p>
<p>小段二</p>
</li>
<li><p>段落一</p>
</li>
</ul>
<blockquote>
<p>区块标记一</p>
</blockquote>
<ul>
<li>段落二</li>
</ul>
<blockquote>
<p>区块标记二</p>
</blockquote>
<hr>
<p><strong>这里是粗体</strong></p>
<p><strong><em>这里是斜体</em></strong></p>
<h2 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h2><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">public void <span class="function"><span class="keyword">fun</span>() &#123;</span></span><br><span class="line"><span class="function">    <span class="title">int</span></span> i;</span><br><span class="line">    System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>int i;</code><br><code>int i;</code></p>
<h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><table>
<thead>
<tr>
<th align="center">表头</th>
<th>头目一</th>
<th>头目二</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>夹哇成长历程</tag>
        <tag>写作技巧</tag>
      </tags>
  </entry>
</search>
